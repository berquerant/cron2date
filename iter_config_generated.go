// Code generated by "goconfig -field Start time.Time|Count int|Duration time.Duration|End time.Time -option -configOption Option -output iter_config_generated.go"; DO NOT EDIT.

package cron2date

import "time"

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	Start    *ConfigItem[time.Time]
	Count    *ConfigItem[int]
	Duration *ConfigItem[time.Duration]
	End      *ConfigItem[time.Time]
}
type ConfigBuilder struct {
	start    time.Time
	count    int
	duration time.Duration
	end      time.Time
}

func (s *ConfigBuilder) Start(v time.Time) *ConfigBuilder {
	s.start = v
	return s
}
func (s *ConfigBuilder) Count(v int) *ConfigBuilder {
	s.count = v
	return s
}
func (s *ConfigBuilder) Duration(v time.Duration) *ConfigBuilder {
	s.duration = v
	return s
}
func (s *ConfigBuilder) End(v time.Time) *ConfigBuilder {
	s.end = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		Start:    NewConfigItem(s.start),
		Count:    NewConfigItem(s.count),
		Duration: NewConfigItem(s.duration),
		End:      NewConfigItem(s.end),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...Option) {
	for _, x := range opt {
		x(s)
	}
}

type Option func(*Config)

func WithStart(v time.Time) Option {
	return func(c *Config) {
		c.Start.Set(v)
	}
}
func WithCount(v int) Option {
	return func(c *Config) {
		c.Count.Set(v)
	}
}
func WithDuration(v time.Duration) Option {
	return func(c *Config) {
		c.Duration.Set(v)
	}
}
func WithEnd(v time.Time) Option {
	return func(c *Config) {
		c.End.Set(v)
	}
}
